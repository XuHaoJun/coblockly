import { Box, Camera, Cursor, Plane, Scene, Sky } from "@belivvr/aframe-react";
import Head from "next/head";
import { useEffect, useState } from "react";
import type { AFrame } from "aframe";
import Editor from "@/components/Editor";
import { NoSsr } from "@mui/base";

function useAframe() {
  const [rendered, setRendered] = useState<boolean>(false);
  const [AFRAME, setAframe] = useState<AFrame | null>(null);
  useEffect(() => {
    setRendered(true);

    if (typeof window !== "undefined") {
      setAframe(require("aframe")); // eslint-disable-line global-require
    }
  }, [setRendered, setAframe]);
  return { rendered, AFRAME };
}

function registerComponents(AFRAME: AFrame) {
  AFRAME.registerComponent("test0", {
    schema: {
      following: { type: "boolean", default: false },
      rotating: { type: "boolean", default: false },
    },

    init: function () {
      // this.el.setAttribute("position", "0 9999 0");
      const data = this.data;
      this.el.addEventListener("mouseenter", function () {
        data.rotating = true;
      });
      this.el.addEventListener("mouseleave", function () {
        data.rotating = false;
      });
      this.el.addEventListener("click", function () {
        data.following = true;
      });
    },

    tick(time, timeDelta) {
      const data = this.data;
      if (data.following) {
        const position = this.el.getAttribute("position");
        if (position.y > 10) {
          this.el.setAttribute("position", {
            x: -1,
            y: 0.5,
            z: -3,
          });
          data.following = false;
        } else {
          this.el.setAttribute("position", {
            ...position,
            y: position.y + timeDelta * 0.01,
          });
        }
      }
      if (data.rotating) {
        const rotation = this.el.getAttribute("rotation");
        this.el.setAttribute("rotation", {
          ...rotation,
          y: rotation.y + timeDelta * 0.1,
        });
      }
    },
  });

  AFRAME.registerComponent("velocity", {
    dependencies: ["position"],

    schema: {
      type: "vec3",
      default: { x: 0, y: 0, z: 0 },
    },

    tick(time, timeDelta) {
      const v = this.data;
      const pos = this.el.getAttribute("position");
      const x = pos.x + v.x * timeDelta * 0.001;
      const y = pos.y + v.y * timeDelta * 0.001;
      const z = pos.z + v.z * timeDelta * 0.001;
      const nextPos = { x, y, z };
      this.el.setAttribute("position", nextPos);
    },
  });

  AFRAME.registerComponent("scriptable", {
    schema: {
      type: "boolean",
      default: true,
    },
  });
}

export default function Home() {
  const { rendered, AFRAME } = useAframe();

  const [registered, setRegistered] = useState<boolean>(false);
  useEffect(() => {
    if (AFRAME && !registered) {
      console.log(AFRAME);
      setRegistered(true);
      registerComponents(AFRAME);
    }
  }, [AFRAME, registered, setRegistered]);

  if (!rendered || !registered) {
    return <>loading</>;
  }

  return (
    <>
      <Head>
        <title>Coblockly</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Scene cursor="rayOrigin: mouse">
          <Box
            id="box1"
            position={{ x: -1, y: 0.5, z: -3 }}
            rotation={{ x: 0, y: 45, z: 0 }}
            color="#4CC3D9"
            test0={{}}
            velocity={{ x: 0, y: 0, z: 0 }}
						scriptable={true}
          />
          <Box
            id="box2"
            position={{ x: 3, y: 0.5, z: -2 }}
            rotation={{ x: 0, y: 45, z: 0 }}
            color="#F0C3D9"
            velocity={{ x: 0, y: 0, z: 0 }}
						scriptable={true}
          />
          <Plane
            position={{ x: 0, y: 0, z: -4 }}
            rotation={{ x: -90, y: 0, z: 0 }}
            width={10}
            height={10}
            color="#7BC8A4"
          />
          <Sky color="#ECECEC" />
          <Camera position={{ x: 3, y: 1.6, z: 4 }}>
            <Cursor></Cursor>
          </Camera>
        </Scene>
        <Editor />
      </main>
    </>
  );
}
